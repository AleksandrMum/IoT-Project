services:
  db:
    image: postgres:18rc1-alpine
    container_name: iot_postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - iot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: iot_node_server
    environment:
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_HOST: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
      SERVER_HOST: ${SERVER_HOST}
      SERVER_PORT: ${SERVER_PORT}
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - iot_network
    restart: unless-stopped

  spa:
    build:
      context: ./spa
      dockerfile: Dockerfile
    container_name: iot_spa
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
    ports:
      - "3000:3000"
    depends_on:
      - server
    networks:
      - iot_network
    restart: unless-stopped

networks:
  iot_network:
    driver: bridge

volumes:
  pgdata: